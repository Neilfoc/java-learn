<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/aop
                           http://www.springframework.org/schema/aop/spring-aop.xsd
                           http://www.springframework.org/schema/tx
                           http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!--创建自己写的SqlSessionFactoryBean-->
    <bean class="mybatis.SqlSessionFactoryBean" id="sqlSessionFactory"></bean>




<!--========================================事务的编码式实现：增删改每一个方法都需要实现一遍==============================================================-->

    <!--创建数据源对象 druid c3p0 dbcp-->
    <bean id="ds" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost:3306/test"/>
        <property name="username" value="root"/>
        <property name="password" value="123"/>
    </bean>

    <!--创建官方的SqlSessionFactoryBean-->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory2">
        <!--
        注意：原来自己创建是用mybatis-config.xml（包含数据源和mapper） 现在需要拆分开来，单独的数据源配置和mapper配置
        不能这么写：<property name="configLocation" value="mybatis/mybatis-config.xml"></property>
        -->
        <property name="dataSource" ref="ds"/>

        <property name="mapperLocations" >
            <array>
                <value>classpath:mybatis/UserDAOMapper.xml</value>
            </array>
        </property>
    </bean>

    <!--创建DAO-->
    <bean id="userDao" class="org.mybatis.spring.mapper.MapperFactoryBean">
        <property name="sqlSessionFactory" ref="sqlSessionFactory2"/>
        <property name="mapperInterface" value="mybatis.UserDao"/>
    </bean>

    <!--创建service-->
    <bean class="mybatis.service.UserServiceImpl" id="userService">
        <property name="userDao" ref="userDao"></property>
        <property name="transactionManager" ref="transactionManager"></property>
    </bean>

    <!--数据源事务管理器-->
    <!--笔记：在service层处理事务的提交和回滚：最底层是使用Connection对象。
    但是在同一个线程中需要保证service层和dao层使用的是同一个connection进行commit和rollback，使用ThreadLocal来实现。
    现在可以使用Spring-Mybatis提供的DataSourecTransactionManager（数据源事务管理器）-->
    <bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager" id="transactionManager">
        <property name="dataSource" ref="ds"></property>
    </bean>



<!--========================================事务的声明式实现1（AOP）：自己实现环绕通知==============================================================-->

    <!--配置service的bean-->
    <bean class="mybatis.aop.UserServiceImplAOP" id="userServiceImplAOP">
        <property name="userDao" ref="userDao"></property>
    </bean>

    <!--配置环绕advice类bean-->
    <bean class="mybatis.aop.TransactionAdvice" id="transactionAdvice">
        <property name="transactionManager" ref="transactionManager"></property>
    </bean>

    <!--配置切面aspect-->
    <aop:config>
        <!--配置切入点-->
        <aop:pointcut id="pc" expression="within(mybatis.aop.UserServiceImplAOP)"/>
        <!--配置切面-->
        <aop:advisor advice-ref="transactionAdvice" pointcut-ref="pc"></aop:advisor>
    </aop:config>



<!--========================================事务的声明式实现2（AOP）：使用Spring提供的tx:advice标签==============================================================-->
    <!--笔记 tx:advice的作用：
        1.可以通过事务管理器创建一个环绕通知（和上面的实现1一样）
        2.可以对事务进行细粒度控制，即 TransactionDefinition 的一些配置-->

    <!--配置环绕通知-->
    <!--<tx:advice id="txAdvice" transaction-manager="transactionManager">
        &lt;!&ndash; 配置事务的属性 <tx:attributes>标签
                isolation：用于指定事务的隔离级别。默认值是DEFAULT，表示使用数据库的默认隔离级别。
                propagation：用于指定事务的传播行为。默认值是REQUIRED，表示一定会有事务，增删改的选择。查询方法可以选择SUPPORTS。
                read-only：用于指定事务是否只读。只有查询方法才能设置为true。默认值是false，表示读写。
                timeout：用于指定事务的超时时间，默认值是-1，表示永不超时。如果指定了数值，以秒为单位。
                rollback-for：用于指定一个异常，当产生该异常时，事务回滚，产生其他异常时，事务不回滚。没有默认值。表示任何异常都回滚。
                no-rollback-for：用于指定一个异常，当产生该异常时，事务不回滚，产生其他异常时事务回滚。没有默认值。表示任何异常都回滚。
        &ndash;&gt;
    </tx:advice>

    &lt;!&ndash;配置切面aspect&ndash;&gt;
    <aop:config>
        &lt;!&ndash;配置切入点&ndash;&gt;
        <aop:pointcut id="pc" expression="within(mybatis.aop.UserServiceImplAOP)"/>
        &lt;!&ndash;配置切面&ndash;&gt;
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pc"></aop:advisor>
    </aop:config>-->

</beans>