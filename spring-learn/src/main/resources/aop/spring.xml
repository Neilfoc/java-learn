<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/aop
                           http://www.springframework.org/schema/aop/spring-aop.xsd">

    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <bean id="userService" class="aop.proxy.UserServiceImpl" ></bean>


    <!--问题:如果为每一个service开发一个静态代理类,不仅没有减轻工作量,甚至让我们的工作量多了一倍不止怎么解决以上这个问题呢?
    解决方案: 为业务层在运行过程中动态创建代理类,通过动态代理类去解决我们现有业务层中业务代码冗余的问题.-->
    <bean class="aop.proxy.UserServiceStaticProxy" id="userServiceStaticProxy">
        <property name="userService" ref="userService"></property>
    </bean>


    <!--aop-->
    <!--AOP面向切面编程：底层实现依赖于动态代理。可以通过 对象.getClass() 判断是普通类还是代理类
    步骤：1.开发通知类（附加功能，有前置、后置、异常、环绕等不同的通知） 2.设置切入点  3.组装成切面-->
    <bean class="aop.EmpServiceImpl" id="empService"></bean>
    <!--配置通知bean-->
    <bean class="aop.BeforeAdvice" id="beforeAdvice"></bean>
    <!--配置切面-->
    <aop:config>
        <!--配置切入点：
            id:切入点的唯一标识
            expression：指定切入到哪个类的哪些方法
                        execution(返回值 包.类名.方法名(..))-->
        <aop:pointcut id="pc" expression="execution(* aop.EmpServiceImpl.*(..))"/>
        <!--配置通切面：通知 + 切入点
            advice-ref：通知的id
            pointcut-ref：切入点的id
            -->
        <aop:advisor advice-ref="beforeAdvice" pointcut-ref="pc"></aop:advisor>
    </aop:config>

    <bean class="aop.aspect.EmpAspect" id = "empAspect"></bean>

</beans>
